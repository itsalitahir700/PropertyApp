{"ast":null,"code":"import fetch from 'isomorphic-unfetch';\nimport shuffle from 'lodash/shuffle';\n\nconst FetchAPIData = url => {\n  return fetch(url).then(r => r.json()).then(data => {\n    return data;\n  });\n};\n\nexport const ProcessAPIData = apiData => {\n  let fetchData = {};\n\n  if (apiData) {\n    apiData.forEach((item, key) => {\n      fetchData.data = item.data ? [...item.data] : [];\n      fetchData.name = item.name ? item.name : '';\n    });\n  }\n\n  const data = fetchData ? fetchData.data : [];\n  return data;\n};\nexport const SearchedData = processedData => {\n  const randNumber = Math.floor(Math.random() * 50 + 1);\n  const data = shuffle(processedData.slice(0, randNumber));\n  return data;\n};\nexport const SearchStateKeyCheck = state => {\n  for (var key in state) {\n    if (state[key] !== null && state[key] != '' && state[key] != [] && state[key] != 0 && state[key] != 100) {\n      return true;\n    }\n  }\n\n  return false;\n};\nexport const Paginator = (posts, processedData, limit) => {\n  return [...posts, ...processedData.slice(posts.length, posts.length + limit)];\n};\n\nconst GetAPIData = async apiUrl => {\n  const promises = apiUrl.map(async repo => {\n    const apiPath = `${process.env.SERVER_API}/static/data`; // read it from env variable\n\n    const api = `${apiPath}/${repo.endpoint}.json`;\n    const response = await FetchAPIData(api);\n    return {\n      name: repo.name,\n      data: response\n    };\n  });\n  const receviedData = await Promise.all(promises);\n  return receviedData;\n};\n\nexport default GetAPIData;","map":{"version":3,"sources":["C:/wamp64/www/Reactapps/my-app/Apnaghar-frontend/TripFinder/packages/hotel-next/library/helpers/get_api_data.js"],"names":["fetch","shuffle","FetchAPIData","url","then","r","json","data","ProcessAPIData","apiData","fetchData","forEach","item","key","name","SearchedData","processedData","randNumber","Math","floor","random","slice","SearchStateKeyCheck","state","Paginator","posts","limit","length","GetAPIData","apiUrl","promises","map","repo","apiPath","process","env","SERVER_API","api","endpoint","response","receviedData","Promise","all"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,gBAApB;;AAEA,MAAMC,YAAY,GAAIC,GAAD,IAAS;AAC5B,SAAOH,KAAK,CAACG,GAAD,CAAL,CACJC,IADI,CACEC,CAAD,IAAOA,CAAC,CAACC,IAAF,EADR,EAEJF,IAFI,CAEEG,IAAD,IAAU;AACd,WAAOA,IAAP;AACD,GAJI,CAAP;AAKD,CAND;;AAQA,OAAO,MAAMC,cAAc,GAAIC,OAAD,IAAa;AACzC,MAAIC,SAAS,GAAG,EAAhB;;AACA,MAAID,OAAJ,EAAa;AACXA,IAAAA,OAAO,CAACE,OAAR,CAAgB,CAACC,IAAD,EAAOC,GAAP,KAAe;AAC7BH,MAAAA,SAAS,CAACH,IAAV,GAAiBK,IAAI,CAACL,IAAL,GAAY,CAAC,GAAGK,IAAI,CAACL,IAAT,CAAZ,GAA6B,EAA9C;AACAG,MAAAA,SAAS,CAACI,IAAV,GAAiBF,IAAI,CAACE,IAAL,GAAYF,IAAI,CAACE,IAAjB,GAAwB,EAAzC;AACD,KAHD;AAID;;AACD,QAAMP,IAAI,GAAGG,SAAS,GAAGA,SAAS,CAACH,IAAb,GAAoB,EAA1C;AACA,SAAOA,IAAP;AACD,CAVM;AAYP,OAAO,MAAMQ,YAAY,GAAIC,aAAD,IAAmB;AAC7C,QAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAAhB,GAAqB,CAAhC,CAAnB;AACA,QAAMb,IAAI,GAAGN,OAAO,CAACe,aAAa,CAACK,KAAd,CAAoB,CAApB,EAAuBJ,UAAvB,CAAD,CAApB;AACA,SAAOV,IAAP;AACD,CAJM;AAMP,OAAO,MAAMe,mBAAmB,GAAIC,KAAD,IAAW;AAC5C,OAAK,IAAIV,GAAT,IAAgBU,KAAhB,EAAuB;AACrB,QACEA,KAAK,CAACV,GAAD,CAAL,KAAe,IAAf,IACAU,KAAK,CAACV,GAAD,CAAL,IAAc,EADd,IAEAU,KAAK,CAACV,GAAD,CAAL,IAAc,EAFd,IAGAU,KAAK,CAACV,GAAD,CAAL,IAAc,CAHd,IAIAU,KAAK,CAACV,GAAD,CAAL,IAAc,GALhB,EAME;AACA,aAAO,IAAP;AACD;AACF;;AACD,SAAO,KAAP;AACD,CAbM;AAeP,OAAO,MAAMW,SAAS,GAAG,CAACC,KAAD,EAAQT,aAAR,EAAuBU,KAAvB,KAAiC;AACxD,SAAO,CAAC,GAAGD,KAAJ,EAAW,GAAGT,aAAa,CAACK,KAAd,CAAoBI,KAAK,CAACE,MAA1B,EAAkCF,KAAK,CAACE,MAAN,GAAeD,KAAjD,CAAd,CAAP;AACD,CAFM;;AAIP,MAAME,UAAU,GAAG,MAAOC,MAAP,IAAkB;AACnC,QAAMC,QAAQ,GAAGD,MAAM,CAACE,GAAP,CAAW,MAAOC,IAAP,IAAgB;AAC1C,UAAMC,OAAO,GAAI,GAAEC,OAAO,CAACC,GAAR,CAAYC,UAAW,cAA1C,CAD0C,CACe;;AACzD,UAAMC,GAAG,GAAI,GAAEJ,OAAQ,IAAGD,IAAI,CAACM,QAAS,OAAxC;AACA,UAAMC,QAAQ,GAAG,MAAMrC,YAAY,CAACmC,GAAD,CAAnC;AACA,WAAO;AACLvB,MAAAA,IAAI,EAAEkB,IAAI,CAAClB,IADN;AAELP,MAAAA,IAAI,EAAEgC;AAFD,KAAP;AAID,GARgB,CAAjB;AASA,QAAMC,YAAY,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYZ,QAAZ,CAA3B;AACA,SAAOU,YAAP;AACD,CAZD;;AAcA,eAAeZ,UAAf","sourcesContent":["import fetch from 'isomorphic-unfetch';\r\nimport shuffle from 'lodash/shuffle';\r\n\r\nconst FetchAPIData = (url) => {\r\n  return fetch(url)\r\n    .then((r) => r.json())\r\n    .then((data) => {\r\n      return data;\r\n    });\r\n};\r\n\r\nexport const ProcessAPIData = (apiData) => {\r\n  let fetchData = {};\r\n  if (apiData) {\r\n    apiData.forEach((item, key) => {\r\n      fetchData.data = item.data ? [...item.data] : [];\r\n      fetchData.name = item.name ? item.name : '';\r\n    });\r\n  }\r\n  const data = fetchData ? fetchData.data : [];\r\n  return data;\r\n};\r\n\r\nexport const SearchedData = (processedData) => {\r\n  const randNumber = Math.floor(Math.random() * 50 + 1);\r\n  const data = shuffle(processedData.slice(0, randNumber));\r\n  return data;\r\n};\r\n\r\nexport const SearchStateKeyCheck = (state) => {\r\n  for (var key in state) {\r\n    if (\r\n      state[key] !== null &&\r\n      state[key] != '' &&\r\n      state[key] != [] &&\r\n      state[key] != 0 &&\r\n      state[key] != 100\r\n    ) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const Paginator = (posts, processedData, limit) => {\r\n  return [...posts, ...processedData.slice(posts.length, posts.length + limit)];\r\n};\r\n\r\nconst GetAPIData = async (apiUrl) => {\r\n  const promises = apiUrl.map(async (repo) => {\r\n    const apiPath = `${process.env.SERVER_API}/static/data`; // read it from env variable\r\n    const api = `${apiPath}/${repo.endpoint}.json`;\r\n    const response = await FetchAPIData(api);\r\n    return {\r\n      name: repo.name,\r\n      data: response,\r\n    };\r\n  });\r\n  const receviedData = await Promise.all(promises);\r\n  return receviedData;\r\n};\r\n\r\nexport default GetAPIData;\r\n"]},"metadata":{},"sourceType":"module"}