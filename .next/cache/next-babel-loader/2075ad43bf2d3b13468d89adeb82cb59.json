{"ast":null,"code":"import _Card from \"antd/lib/card\";\nimport _Button from \"antd/lib/button\";\nimport _Row from \"antd/lib/row\";\nimport _Col from \"antd/lib/col\";\nimport _Select from \"antd/lib/select\";\nimport _Form from \"antd/lib/form\";\nimport _Radio from \"antd/lib/radio\";\nimport _Alert from \"antd/lib/alert\";\nimport _Input from \"antd/lib/input\";\nimport _message from \"antd/lib/message\";\nimport _Upload from \"antd/lib/upload\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { padding } from \"styled-system\";\nimport axios from \"axios\";\nimport { getPropType, getPropSubType, getCountries, getCities, getLocations, getCurrency, getArea } from \"../../settings/service\";\n\nconst AddProperty = ({\n  handleReturn\n}) => {\n  const {\n    0: loading,\n    1: setloading\n  } = useState(false);\n  const {\n    0: imageUrl,\n    1: setimageUrl\n  } = useState(\"\");\n  const {\n    0: purpose,\n    1: setpurpose\n  } = useState(\"\");\n  const {\n    0: country,\n    1: setCountry\n  } = useState(\"\");\n  const {\n    0: city,\n    1: setCity\n  } = useState(\"\");\n  const {\n    0: location,\n    1: setLocation\n  } = useState(\"\");\n  const {\n    0: title,\n    1: setTitle\n  } = useState(\"\");\n  const {\n    0: details,\n    1: setDetails\n  } = useState(\"\");\n  const {\n    0: price,\n    1: setPrice\n  } = useState(\"\");\n  const {\n    0: pricecurrency,\n    1: setCurrency\n  } = useState(\"\");\n  const {\n    0: localArea,\n    1: setLocalArea\n  } = useState(\"\");\n  const {\n    0: areaUnit,\n    1: setareaUnit\n  } = useState(\"\");\n  const {\n    0: bedrooms,\n    1: setBedrooms\n  } = useState(\"\");\n  const {\n    0: bathrooms,\n    1: setBathrooms\n  } = useState(\"\");\n  const {\n    0: expireAfter,\n    1: setExpireAfter\n  } = useState(\"\");\n  const {\n    0: phone,\n    1: setPhone\n  } = useState(\"\");\n  const {\n    0: email,\n    1: setEmail\n  } = useState(\"\");\n  const {\n    0: files,\n    1: setFiles\n  } = useState([]);\n  const {\n    0: propdeveloper,\n    1: setPropdeveloper\n  } = useState(\"\");\n  const {\n    0: constructionStatus,\n    1: setConstructionStatus\n  } = useState(\"\"); // API RESULTS\n\n  const {\n    0: proptypedata,\n    1: setproptypedata\n  } = useState([]);\n  const {\n    0: citieslist,\n    1: setciteslist\n  } = useState([]);\n  const {\n    0: countrieslist,\n    1: setcountrieslist\n  } = useState([]);\n  const {\n    0: locationslist,\n    1: setlocationslist\n  } = useState([]);\n  const {\n    0: currencylist,\n    1: setcurrencylist\n  } = useState([]);\n  const {\n    0: proptypevalue,\n    1: setproptypevalue\n  } = useState([]);\n  const {\n    0: propsubtypedata,\n    1: setpropsubtypedata\n  } = useState([]);\n  const {\n    0: propsubtypedataall,\n    1: setpropsubtypedataall\n  } = useState([]);\n  const {\n    0: arealist,\n    1: setarealist\n  } = useState([]);\n  let propType = \"\";\n  let propsubType = \"\";\n  let cities = \"\";\n  let counties = \"\";\n  let locations = \"\";\n  let currency = \"\";\n  let area = \"\";\n  let response = \"\";\n  const {\n    Dragger\n  } = _Upload;\n  const props = {\n    name: \"file\",\n    multiple: true,\n    action: \"https://www.mocky.io/v2/5cc8019d300000980a055e76\",\n\n    onChange(info) {\n      const {\n        status\n      } = info.file;\n\n      if (status !== \"uploading\") {\n        console.log(info.file, info.fileList);\n      }\n\n      if (status === \"done\") {\n        _message.success(`${info.file.name} file uploaded successfully.`);\n      } else if (status === \"error\") {\n        _message.error(`${info.file.name} file upload failed.`);\n      }\n    }\n\n  };\n  useEffect(() => {\n    functproptype();\n    functcities();\n    functcountries();\n    functcurrency();\n    funcpropsbtype();\n    functarea();\n  }, []);\n\n  async function functproptype() {\n    propType = await getPropType();\n    setproptypedata(propType.data);\n  }\n\n  async function functcountries() {\n    counties = await getCountries();\n    setcountrieslist(counties.data);\n  }\n\n  async function functcities() {\n    cities = await getCities();\n    setciteslist(cities.data);\n  }\n\n  async function functlocation(cityId) {\n    locations = await getLocations(cityId);\n    setlocationslist(locations.data);\n  }\n\n  async function functcurrency() {\n    currency = await getCurrency();\n    setcurrencylist(currency.data);\n  }\n\n  async function funcpropsbtype() {\n    propsubType = await getPropSubType();\n    setpropsubtypedataall(propsubType.data);\n  }\n\n  async function functarea() {\n    area = await getArea();\n    setarealist(area.data);\n  }\n\n  const handleSetProperty = e => {\n    const main_property_cat = e.target.value;\n    setproptypevalue(e.target.value);\n    let filtered_sub_cat = propsubtypedataall.filter(a => {\n      return a.ptypeCat == main_property_cat;\n    });\n    setpropsubtypedata(filtered_sub_cat);\n  };\n\n  const handleimage = event => {\n    console.log(\"images\", event.target.files);\n    setFiles(Array.from(event.target.files));\n  };\n\n  const submitHandler = e => {\n    let formData = new FormData(); //formdata object\n\n    const data = `{  \"postPurpose\": \"${purpose}\", \n    \"propType\": ${proptypevalue},\n    \"postTitle\": \"${title}\",\n    \"postDescription\": \"${details}\",\n    \"postLocation\": \"${location}\",\n    \"postCity\": ${city},\n    \"postCountry\": \"${country}\", \n    \"postTel\": ${phone}, \n    \"postPrice\": ${price}, \n    \"postPriceCurrency\": \"${pricecurrency}\", \n    \"postPropArea\": ${localArea},\n    \"postPropAreaUnit\":\"${areaUnit}\",\n    \"postConstructionStatus\": \"${constructionStatus}\",\n    \"postPropDeveloper\": \"${propdeveloper}\"}`;\n    formData.append(\"newPost\", data);\n    formData.append(\"files\", files);\n\n    for (var key of formData.entries()) {\n      console.log(\"yai data\", key[0] + \", \" + key[1]);\n    }\n\n    axios({\n      method: \"post\",\n      url: `http://ec2-13-229-109-204.ap-southeast-1.compute.amazonaws.com:8080/apna/v1/posts`,\n      data: formData,\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n        Authorization: \"Basic YXBuYTphcG5hZ2hhcjEyMzQ=\",\n        Cookie: \"JSESSIONID=E2A8BF2571BA6B875803BD545D43BBD6\"\n      }\n    }).then(function (response) {\n      //handle success\n      response = response.data;\n      handleReturn(response);\n    }).catch(function (response) {\n      //handle error\n      console.log(response);\n    });\n  };\n\n  const {\n    TextArea\n  } = _Input;\n  return __jsx(_Card, {\n    style: {\n      paddingLeft: \"10rem\",\n      paddingRight: \"10rem\"\n    }\n  }, __jsx(_Alert, {\n    message: \"PROPERTY TYPE AND LOCATION\",\n    type: \"success\"\n  }), __jsx(_Form, {\n    labelCol: {\n      span: 4\n    },\n    wrapperCol: {\n      span: 14\n    },\n    layout: \"horizontal\",\n    style: {\n      marginTop: \"20px\"\n    }\n  }, __jsx(_Form.Item, {\n    label: \"Purpose\"\n  }, __jsx(_Radio.Group, null, __jsx(_Radio.Button, {\n    onClick: e => setpurpose(e.target.value),\n    value: \"B\"\n  }, \"Buy\"), __jsx(_Radio.Button, {\n    onClick: e => setpurpose(e.target.value),\n    value: \"R\"\n  }, \"Rent\"), __jsx(_Radio.Button, {\n    onClick: e => setpurpose(e.target.value),\n    value: \"P\"\n  }, \"Project\"))), __jsx(_Form.Item, {\n    label: \"Property Type\",\n    name: \"size\"\n  }, __jsx(_Radio.Group, null, proptypedata && proptypedata.length !== 0 ? proptypedata.map(item => {\n    return __jsx(\"span\", {\n      key: item.code\n    }, __jsx(_Radio.Button, {\n      value: item.code,\n      onClick: handleSetProperty\n    }, item.name));\n  }) : \"No Records Found\"), __jsx(\"br\", null), __jsx(_Radio.Group, {\n    style: {\n      marginTop: \"5px\",\n      marginLeft: \"20px\"\n    }\n  }, propsubtypedata && propsubtypedata.length !== 0 ? propsubtypedata.map((item, index) => {\n    return __jsx(\"span\", {\n      key: item.index\n    }, __jsx(_Radio.Button, {\n      value: item.ptypeName\n    }, item.ptypeName));\n  }) : \"No Records Found\")), __jsx(_Form.Item, {\n    label: \"Select country\"\n  }, __jsx(_Select, {\n    value: country,\n    onChange: e => {\n      setCountry(e);\n    }\n  }, countrieslist && countrieslist.length !== 0 ? countrieslist.map((item, index) => {\n    return __jsx(_Select.Option, {\n      value: item.countryCode,\n      key: item.countryCode\n    }, item.countryName);\n  }) : \"No Records Found\")), __jsx(_Form.Item, {\n    label: \"Select city\"\n  }, __jsx(_Select, {\n    value: city,\n    onChange: e => {\n      setCity(e);\n      functlocation(e);\n    }\n  }, citieslist && citieslist.length !== 0 ? citieslist.map((item, index) => {\n    return __jsx(_Select.Option, {\n      value: item.cityId,\n      key: item.cityId\n    }, item.cityName);\n  }) : \"No Records Found\")), __jsx(_Form.Item, {\n    label: \"Select Location\"\n  }, __jsx(_Select, {\n    value: location,\n    onChange: e => setLocation(e)\n  }, locationslist && locationslist.length !== 0 ? locationslist.map((item, index) => {\n    return __jsx(_Select.Option, {\n      value: item.plName,\n      key: item.plName\n    }, item.plName);\n  }) : \"No Records Found\"))), __jsx(_Alert, {\n    message: \"PROPERTY DETAILS\",\n    type: \"success\"\n  }), __jsx(_Form, {\n    labelCol: {\n      span: 4\n    },\n    wrapperCol: {\n      span: 14\n    },\n    layout: \"horizontal\",\n    style: {\n      marginTop: \"20px\"\n    }\n  }, __jsx(_Form.Item, {\n    label: \"Property Title\"\n  }, __jsx(_Input, {\n    value: title,\n    onChange: e => setTitle(e.target.value)\n  })), __jsx(_Form.Item, {\n    label: \"Property Details\"\n  }, __jsx(TextArea, {\n    value: details,\n    onChange: e => setDetails(e.target.value),\n    rows: 4\n  })), __jsx(_Form.Item, {\n    label: \"Property Developer\"\n  }, __jsx(_Input, {\n    value: propdeveloper,\n    onChange: e => setPropdeveloper(e.target.value)\n  })), __jsx(_Form.Item, {\n    label: \"Construction Status\"\n  }, __jsx(_Select, {\n    value: constructionStatus,\n    onChange: e => setConstructionStatus(e)\n  }, __jsx(_Select.Option, {\n    value: \"C\"\n  }, \"Completed\"), __jsx(_Select.Option, {\n    value: \"U\"\n  }, \"UNDERCONSTRUCTION\"))), __jsx(_Row, null, __jsx(_Col, {\n    lg: 12\n  }, __jsx(_Form.Item, {\n    label: \"All inclusive Price\"\n  }, __jsx(_Input, {\n    value: price,\n    onChange: e => setPrice(e.target.value)\n  }))), __jsx(_Col, {\n    lg: 12\n  }, __jsx(_Form.Item, {\n    label: \"Select Currency\"\n  }, __jsx(_Select, {\n    value: pricecurrency,\n    onChange: e => setCurrency(e)\n  }, currencylist && currencylist.length !== 0 ? currencylist.map((item, index) => {\n    return __jsx(_Select.Option, {\n      value: item.currencyCode,\n      key: item.currencyCode\n    }, item.currencyCode);\n  }) : \"No Records Found\")))), __jsx(_Row, null, __jsx(_Col, {\n    lg: 12\n  }, __jsx(_Form.Item, {\n    label: \"Land Area\"\n  }, __jsx(_Input, {\n    value: localArea,\n    onChange: e => setLocalArea(e.target.value)\n  }))), __jsx(_Col, {\n    lg: 12\n  }, __jsx(_Form.Item, {\n    label: \"Area Unit\"\n  }, __jsx(_Select, {\n    value: areaUnit,\n    onChange: e => setareaUnit(e)\n  }, arealist && arealist.length !== 0 ? arealist.map((item, index) => {\n    return __jsx(_Select.Option, {\n      value: item.areaUnitCode,\n      key: item.areaUnitCode\n    }, item.areaUnitName);\n  }) : \"No Records Found\")))), __jsx(_Alert, {\n    message: \"Add Images\",\n    type: \"success\"\n  }), __jsx(\"input\", {\n    type: \"file\",\n    multiple: true,\n    onChange: handleimage\n  })), __jsx(_Alert, {\n    message: \"CONTACT DETAILS\",\n    type: \"success\"\n  }), __jsx(_Form, {\n    labelCol: {\n      span: 4\n    },\n    wrapperCol: {\n      span: 14\n    },\n    layout: \"horizontal\",\n    style: {\n      marginTop: \"20px\"\n    }\n  }), __jsx(_Form, {\n    labelCol: {\n      span: 4\n    },\n    wrapperCol: {\n      span: 14\n    },\n    layout: \"horizontal\",\n    style: {\n      marginTop: \"20px\"\n    }\n  }, __jsx(_Form.Item, {\n    label: \"Phone \"\n  }, __jsx(_Input, {\n    value: phone,\n    onChange: e => setPhone(e.target.value)\n  })), __jsx(_Form.Item, {\n    label: \"Email\"\n  }, __jsx(_Input, {\n    value: email,\n    onChange: e => setEmail(e.target.value)\n  })), __jsx(\"center\", null, __jsx(_Button, {\n    type: \"primary\",\n    size: \"large\",\n    onClick: submitHandler\n  }, \"Submit Property\"))));\n};\n\nexport default AddProperty;","map":null,"metadata":{},"sourceType":"module"}