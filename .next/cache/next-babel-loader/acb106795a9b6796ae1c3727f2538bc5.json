{"ast":null,"code":"import _Card from \"antd/lib/card\";\nimport _Input from \"antd/lib/input\";\nimport _message from \"antd/lib/message\";\nimport _Upload from \"antd/lib/upload\";\nvar _jsxFileName = \"C:\\\\wamp64\\\\www\\\\Reactapps\\\\my-app\\\\Apnaghar-frontend\\\\TripFinder\\\\packages\\\\hotel-next\\\\container\\\\AddListing\\\\AddListing.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { padding } from \"styled-system\";\nimport axios from \"axios\";\nimport { getPropType, getPropSubType, getCities, getLocations, getCurrency, getArea } from \"../../settings/service\";\nimport AddFeature from \"./AddFeature\";\n\nconst Addlisting = () => {\n  const {\n    0: loading,\n    1: setloading\n  } = useState(false);\n  const {\n    0: imageUrl,\n    1: setimageUrl\n  } = useState(\"\");\n  const {\n    0: purpose,\n    1: setpurpose\n  } = useState(\"\");\n  const {\n    0: city,\n    1: setCity\n  } = useState(\"\");\n  const {\n    0: location,\n    1: setLocation\n  } = useState(\"\");\n  const {\n    0: title,\n    1: setTitle\n  } = useState(\"\");\n  const {\n    0: details,\n    1: setDetails\n  } = useState(\"\");\n  const {\n    0: price,\n    1: setPrice\n  } = useState(\"\");\n  const {\n    0: pricecurrency,\n    1: setCurrency\n  } = useState(\"\");\n  const {\n    0: localArea,\n    1: setLocalArea\n  } = useState(\"\");\n  const {\n    0: areaUnit,\n    1: setareaUnit\n  } = useState(\"\");\n  const {\n    0: bedrooms,\n    1: setBedrooms\n  } = useState(\"\");\n  const {\n    0: bathrooms,\n    1: setBathrooms\n  } = useState(\"\");\n  const {\n    0: expireAfter,\n    1: setExpireAfter\n  } = useState(\"\");\n  const {\n    0: phone,\n    1: setPhone\n  } = useState(\"\");\n  const {\n    0: email,\n    1: setEmail\n  } = useState(\"\");\n  const {\n    0: files,\n    1: setFiles\n  } = useState([]); // API RESULTS\n\n  const {\n    0: proptypedata,\n    1: setproptypedata\n  } = useState([]);\n  const {\n    0: citieslist,\n    1: setciteslist\n  } = useState([]);\n  const {\n    0: locationslist,\n    1: setlocationslist\n  } = useState([]);\n  const {\n    0: currencylist,\n    1: setcurrencylist\n  } = useState([]);\n  const {\n    0: proptypevalue,\n    1: setproptypevalue\n  } = useState([]);\n  const {\n    0: propsubtypedata,\n    1: setpropsubtypedata\n  } = useState([]);\n  const {\n    0: propsubtypedataall,\n    1: setpropsubtypedataall\n  } = useState([]);\n  const {\n    0: arealist,\n    1: setarealist\n  } = useState([]);\n  let propType = \"\";\n  let propsubType = \"\";\n  let cities = \"\";\n  let locations = \"\";\n  let currency = \"\";\n  let area = \"\";\n  const {\n    Dragger\n  } = _Upload;\n  const props = {\n    name: \"file\",\n    multiple: true,\n    action: \"https://www.mocky.io/v2/5cc8019d300000980a055e76\",\n\n    onChange(info) {\n      const {\n        status\n      } = info.file;\n\n      if (status !== \"uploading\") {\n        console.log(info.file, info.fileList);\n      }\n\n      if (status === \"done\") {\n        _message.success(`${info.file.name} file uploaded successfully.`);\n      } else if (status === \"error\") {\n        _message.error(`${info.file.name} file upload failed.`);\n      }\n    }\n\n  };\n  useEffect(() => {\n    functproptype();\n    functcities();\n    functcurrency();\n    funcpropsbtype();\n    functarea();\n  }, []);\n\n  async function functproptype() {\n    propType = await getPropType();\n    setproptypedata(propType.data);\n  }\n\n  async function functcities() {\n    cities = await getCities();\n    setciteslist(cities.data);\n  }\n\n  async function functlocation(cityId) {\n    locations = await getLocations(cityId);\n    setlocationslist(locations.data);\n  }\n\n  async function functcurrency() {\n    currency = await getCurrency();\n    setcurrencylist(currency.data);\n  }\n\n  async function funcpropsbtype() {\n    propsubType = await getPropSubType();\n    setpropsubtypedataall(propsubType.data);\n  }\n\n  async function functarea() {\n    area = await getArea();\n    setarealist(area.data);\n  }\n\n  function handlesubmit() {\n    const formData = new FormData();\n\n    for (var index = 0; index < files.length; index++) {\n      formData.append(\"files\", files[index]);\n    }\n\n    for (var value of formData.values()) {\n      console.log(\"value\", value);\n    }\n  }\n\n  const handleSetProperty = e => {\n    const main_property_cat = e.target.value;\n    setproptypevalue(e.target.value);\n    let filtered_sub_cat = propsubtypedataall.filter(a => {\n      return a.ptypeCat == main_property_cat;\n    });\n    setpropsubtypedata(filtered_sub_cat);\n  };\n\n  console.log(proptypedata, \"propslist\");\n  console.log(citieslist, \"citieslist\");\n  console.log(locationslist, \"locationslist\");\n  console.log(currencylist, \"currencylist\");\n  console.log(arealist, \"arealist\");\n  console.log(files, \"files\");\n\n  const handleimage = event => {\n    console.log(\"images\", event.target.files);\n    setFiles(Array.from(event.target.files));\n  };\n\n  const {\n    TextArea\n  } = _Input;\n  return __jsx(_Card, {\n    style: {\n      paddingLeft: \"10rem\",\n      paddingRight: \"10rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 5\n    }\n  }, __jsx(AddFeature, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Addlisting;","map":{"version":3,"sources":["C:/wamp64/www/Reactapps/my-app/Apnaghar-frontend/TripFinder/packages/hotel-next/container/AddListing/AddListing.js"],"names":["React","useState","useEffect","padding","axios","getPropType","getPropSubType","getCities","getLocations","getCurrency","getArea","AddFeature","Addlisting","loading","setloading","imageUrl","setimageUrl","purpose","setpurpose","city","setCity","location","setLocation","title","setTitle","details","setDetails","price","setPrice","pricecurrency","setCurrency","localArea","setLocalArea","areaUnit","setareaUnit","bedrooms","setBedrooms","bathrooms","setBathrooms","expireAfter","setExpireAfter","phone","setPhone","email","setEmail","files","setFiles","proptypedata","setproptypedata","citieslist","setciteslist","locationslist","setlocationslist","currencylist","setcurrencylist","proptypevalue","setproptypevalue","propsubtypedata","setpropsubtypedata","propsubtypedataall","setpropsubtypedataall","arealist","setarealist","propType","propsubType","cities","locations","currency","area","Dragger","props","name","multiple","action","onChange","info","status","file","console","log","fileList","success","error","functproptype","functcities","functcurrency","funcpropsbtype","functarea","data","functlocation","cityId","handlesubmit","formData","FormData","index","length","append","value","values","handleSetProperty","e","main_property_cat","target","filtered_sub_cat","filter","a","ptypeCat","handleimage","event","Array","from","TextArea","paddingLeft","paddingRight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button,\r\n  Radio,\r\n  Select,\r\n  Cascader,\r\n  DatePicker,\r\n  InputNumber,\r\n  TreeSelect,\r\n  Switch,\r\n  Alert,\r\n  Row,\r\n  Col,\r\n  Upload,\r\n  Icon,\r\n  message,\r\n  Card,\r\n} from \"antd\";\r\nimport { padding } from \"styled-system\";\r\nimport axios from \"axios\";\r\nimport {\r\n  getPropType,\r\n  getPropSubType,\r\n  getCities,\r\n  getLocations,\r\n  getCurrency,\r\n  getArea,\r\n} from \"../../settings/service\";\r\nimport AddFeature from \"./AddFeature\";\r\n\r\nconst Addlisting = () => {\r\n  const [loading, setloading] = useState(false);\r\n  const [imageUrl, setimageUrl] = useState(\"\");\r\n  const [purpose, setpurpose] = useState(\"\");\r\n  const [city, setCity] = useState(\"\");\r\n  const [location, setLocation] = useState(\"\");\r\n  const [title, setTitle] = useState(\"\");\r\n  const [details, setDetails] = useState(\"\");\r\n  const [price, setPrice] = useState(\"\");\r\n  const [pricecurrency, setCurrency] = useState(\"\");\r\n  const [localArea, setLocalArea] = useState(\"\");\r\n  const [areaUnit, setareaUnit] = useState(\"\");\r\n  const [bedrooms, setBedrooms] = useState(\"\");\r\n  const [bathrooms, setBathrooms] = useState(\"\");\r\n  const [expireAfter, setExpireAfter] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [files, setFiles] = useState([]);\r\n\r\n  // API RESULTS\r\n  const [proptypedata, setproptypedata] = useState([]);\r\n  const [citieslist, setciteslist] = useState([]);\r\n  const [locationslist, setlocationslist] = useState([]);\r\n  const [currencylist, setcurrencylist] = useState([]);\r\n  const [proptypevalue, setproptypevalue] = useState([]);\r\n  const [propsubtypedata, setpropsubtypedata] = useState([]);\r\n  const [propsubtypedataall, setpropsubtypedataall] = useState([]);\r\n  const [arealist, setarealist] = useState([]);\r\n\r\n  let propType = \"\";\r\n  let propsubType = \"\";\r\n  let cities = \"\";\r\n  let locations = \"\";\r\n  let currency = \"\";\r\n  let area = \"\";\r\n  const { Dragger } = Upload;\r\n\r\n  const props = {\r\n    name: \"file\",\r\n    multiple: true,\r\n    action: \"https://www.mocky.io/v2/5cc8019d300000980a055e76\",\r\n    onChange(info) {\r\n      const { status } = info.file;\r\n      if (status !== \"uploading\") {\r\n        console.log(info.file, info.fileList);\r\n      }\r\n      if (status === \"done\") {\r\n        message.success(`${info.file.name} file uploaded successfully.`);\r\n      } else if (status === \"error\") {\r\n        message.error(`${info.file.name} file upload failed.`);\r\n      }\r\n    },\r\n  };\r\n  useEffect(() => {\r\n    functproptype();\r\n    functcities();\r\n    functcurrency();\r\n    funcpropsbtype();\r\n    functarea();\r\n  }, []);\r\n\r\n  async function functproptype() {\r\n    propType = await getPropType();\r\n    setproptypedata(propType.data);\r\n  }\r\n  async function functcities() {\r\n    cities = await getCities();\r\n    setciteslist(cities.data);\r\n  }\r\n  async function functlocation(cityId) {\r\n    locations = await getLocations(cityId);\r\n    setlocationslist(locations.data);\r\n  }\r\n  async function functcurrency() {\r\n    currency = await getCurrency();\r\n    setcurrencylist(currency.data);\r\n  }\r\n\r\n  async function funcpropsbtype() {\r\n    propsubType = await getPropSubType();\r\n    setpropsubtypedataall(propsubType.data);\r\n  }\r\n\r\n  async function functarea() {\r\n    area = await getArea();\r\n    setarealist(area.data);\r\n  }\r\n  function handlesubmit() {\r\n    const formData = new FormData();\r\n    for (var index = 0; index < files.length; index++) {\r\n      formData.append(\"files\", files[index]);\r\n    }\r\n    for (var value of formData.values()) {\r\n      console.log(\"value\", value);\r\n    }\r\n  }\r\n  const handleSetProperty = (e) => {\r\n    const main_property_cat = e.target.value;\r\n    setproptypevalue(e.target.value);\r\n    let filtered_sub_cat = propsubtypedataall.filter((a) => {\r\n      return a.ptypeCat == main_property_cat;\r\n    });\r\n    setpropsubtypedata(filtered_sub_cat);\r\n  };\r\n\r\n  console.log(proptypedata, \"propslist\");\r\n  console.log(citieslist, \"citieslist\");\r\n  console.log(locationslist, \"locationslist\");\r\n  console.log(currencylist, \"currencylist\");\r\n  console.log(arealist, \"arealist\");\r\n  console.log(files, \"files\");\r\n\r\n  const handleimage = (event) => {\r\n    console.log(\"images\", event.target.files);\r\n    setFiles(Array.from(event.target.files));\r\n  };\r\n\r\n  const { TextArea } = Input;\r\n  return (\r\n    <Card style={{ paddingLeft: \"10rem\", paddingRight: \"10rem\" }}>\r\n      {/* <Alert message=\"PROPERTY TYPE AND LOCATION\" type=\"success\" />\r\n      <Form\r\n        labelCol={{\r\n          span: 4,\r\n        }}\r\n        wrapperCol={{\r\n          span: 14,\r\n        }}\r\n        layout=\"horizontal\"\r\n        style={{ marginTop: \"20px\" }}\r\n      >\r\n        <Form.Item label=\"Purpose\">\r\n          <Radio.Group>\r\n            <Radio.Button onClick={(e) => setpurpose(e.target.value)} value=\"B\">\r\n              Buy\r\n            </Radio.Button>\r\n            <Radio.Button onClick={(e) => setpurpose(e.target.value)} value=\"R\">\r\n              Rent\r\n            </Radio.Button>\r\n            <Radio.Button onClick={(e) => setpurpose(e.target.value)} value=\"P\">\r\n              Project\r\n            </Radio.Button>\r\n          </Radio.Group>\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Property Type\" name=\"size\">\r\n          <Radio.Group>\r\n            {proptypedata && proptypedata.length !== 0\r\n              ? proptypedata.map((item) => {\r\n                  return (\r\n                    <span key={item.code}>\r\n                      <Radio.Button\r\n                        value={item.code}\r\n                        onClick={handleSetProperty}\r\n                      >\r\n                        {item.name}\r\n                      </Radio.Button>\r\n                    </span>\r\n                  );\r\n                })\r\n              : \"No Records Found\"}\r\n          </Radio.Group>\r\n          <br></br>\r\n          <Radio.Group style={{ marginTop: \"5px\", marginLeft: \"20px\" }}>\r\n            {propsubtypedata && propsubtypedata.length !== 0\r\n              ? propsubtypedata.map((item, index) => {\r\n                  return (\r\n                    <span key={item.index}>\r\n                      <Radio.Button value={item.ptypeName}>\r\n                        {item.ptypeName}\r\n                      </Radio.Button>\r\n                    </span>\r\n                  );\r\n                })\r\n              : \"No Records Found\"}\r\n          </Radio.Group>\r\n        </Form.Item>\r\n        <Form.Item label=\"Select city\">\r\n          <Select\r\n            value={city}\r\n            onChange={(e) => {\r\n              setCity(e);\r\n              functlocation(e);\r\n            }}\r\n          >\r\n            {citieslist && citieslist.length !== 0\r\n              ? citieslist.map((item, index) => {\r\n                  return (\r\n                    <Select.Option value={item.cityId} key={item.cityId}>\r\n                      {item.cityName}\r\n                    </Select.Option>\r\n                  );\r\n                })\r\n              : \"No Records Found\"}\r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Select Location\">\r\n          <Select value={location} onChange={(e) => setLocation(e)}>\r\n            {locationslist && locationslist.length !== 0\r\n              ? locationslist.map((item, index) => {\r\n                  return (\r\n                    <Select.Option value={item.plName} key={item.plName}>\r\n                      {item.plName}\r\n                    </Select.Option>\r\n                  );\r\n                })\r\n              : \"No Records Found\"}\r\n          </Select>\r\n        </Form.Item>\r\n      </Form>\r\n      <Alert message=\"PROPERTY DETAILS\" type=\"success\" />\r\n      <Form\r\n        labelCol={{\r\n          span: 4,\r\n        }}\r\n        wrapperCol={{\r\n          span: 14,\r\n        }}\r\n        layout=\"horizontal\"\r\n        style={{ marginTop: \"20px\" }}\r\n      >\r\n        <Form.Item label=\"Property Title\">\r\n          <Input value={title} onChange={(e) => setTitle(e.target.value)} />\r\n        </Form.Item>\r\n        <Form.Item label=\"Property Details\">\r\n          <TextArea\r\n            value={details}\r\n            onChange={(e) => setDetails(e.target.value)}\r\n            rows={4}\r\n          />\r\n        </Form.Item>\r\n        <Row>\r\n          <Col lg={12}>\r\n            <Form.Item label=\"All inclusive Price\">\r\n              <Input value={price} onChange={(e) => setPrice(e.target.value)} />\r\n            </Form.Item>\r\n          </Col>\r\n          <Col lg={12}>\r\n            <Form.Item label=\"Select Currency\">\r\n              <Select value={pricecurrency} onChange={(e) => setCurrency(e)}>\r\n                {currencylist && currencylist.length !== 0\r\n                  ? currencylist.map((item, index) => {\r\n                      return (\r\n                        <Select.Option\r\n                          value={item.currencyCode}\r\n                          key={item.currencyCode}\r\n                        >\r\n                          {item.currencyCode}\r\n                        </Select.Option>\r\n                      );\r\n                    })\r\n                  : \"No Records Found\"}\r\n              </Select>\r\n            </Form.Item>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col lg={12}>\r\n            <Form.Item label=\"Land Area\">\r\n              <Input onChange={(e) => setLocalArea(e.target.value)} />\r\n            </Form.Item>\r\n          </Col>\r\n          <Col lg={12}>\r\n            <Form.Item label=\"Area Unit\">\r\n              <Select value={areaUnit} onChange={(e) => setareaUnit(e)}>\r\n                {arealist && arealist.length !== 0\r\n                  ? arealist.map((item, index) => {\r\n                      return (\r\n                        <Select.Option\r\n                          value={item.areaUnitCode}\r\n                          key={item.areaUnitCode}\r\n                        >\r\n                          {item.areaUnitName}\r\n                        </Select.Option>\r\n                      );\r\n                    })\r\n                  : \"No Records Found\"}\r\n              </Select>\r\n            </Form.Item>\r\n          </Col>\r\n        </Row>\r\n        <Form.Item label=\"Bedrooms\">\r\n          <Select\r\n            value={bedrooms}\r\n            onChange={(e) => setBedrooms(e.target.value)}\r\n          >\r\n            <Select.Option value=\"demo\" selected>\r\n              Islamabad\r\n            </Select.Option>\r\n            <Select.Option value=\"1\">1</Select.Option>\r\n            <Select.Option value=\"2\">2</Select.Option>\r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Bathrooms\">\r\n          <Select\r\n            value={bathrooms}\r\n            onChange={(e) => setBathrooms(e.target.value)}\r\n          >\r\n            <Select.Option value=\"demo\" selected>\r\n              Islamabad\r\n            </Select.Option>\r\n            <Select.Option value=\"1\">1</Select.Option>\r\n            <Select.Option value=\"2\">2</Select.Option>\r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Expires After\">\r\n          <Select\r\n            value={expireAfter}\r\n            onChange={(e) => setExpireAfter(e.target.value)}\r\n          >\r\n            <Select.Option value=\"6 Months\" selected>\r\n              6 Months\r\n            </Select.Option>\r\n            <Select.Option value=\"1 Year\">1 Year</Select.Option>\r\n          </Select>\r\n        </Form.Item>\r\n        <Alert message=\"Add Images\" type=\"success\"></Alert>\r\n        <input type=\"file\" multiple onChange={handleimage} />\r\n      </Form>\r\n      <Alert message=\"CONTACT DETAILS\" type=\"success\" />\r\n      <Form\r\n        labelCol={{\r\n          span: 4,\r\n        }}\r\n        wrapperCol={{\r\n          span: 14,\r\n        }}\r\n        layout=\"horizontal\"\r\n        style={{ marginTop: \"20px\" }}\r\n      ></Form>\r\n      <Form\r\n        labelCol={{\r\n          span: 4,\r\n        }}\r\n        wrapperCol={{\r\n          span: 14,\r\n        }}\r\n        layout=\"horizontal\"\r\n        style={{ marginTop: \"20px\" }}\r\n      >\r\n        <Form.Item label=\"Phone \">\r\n          <Input value={phone} onChange={(e) => setPhone(e.target.value)} />\r\n        </Form.Item>\r\n        <Form.Item label=\"Email\">\r\n          <Input value={email} onChange={(e) => setEmail(e.target.value)} />\r\n        </Form.Item>\r\n        <center>\r\n          <Button type=\"primary\" size=\"large\" onClick={handlesubmit}>\r\n            Submit Property\r\n          </Button>\r\n        </center>\r\n      </Form> */}\r\n      <AddFeature />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Addlisting;\r\n"]},"metadata":{},"sourceType":"module"}